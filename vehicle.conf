{"slots":{"0":{"name":"emitter","type":{"events":[],"methods":[]}},"1":{"name":"receiver","type":{"events":[],"methods":[]}},"2":{"name":"db","type":{"events":[],"methods":[]}},"3":{"name":"core","type":{"events":[],"methods":[]}},"4":{"name":"light1","type":{"events":[],"methods":[]}},"5":{"name":"light2","type":{"events":[],"methods":[]}},"6":{"name":"db","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"if myDebug then system.print('Vehicle received: \"'..message..'\" on channel: \"'..channel..'\"') end\n\nlocal function splitMsgAssembly(msgPart)\n  mess = string.gsub(msgPart, \"|\", '\\\\\"')\n  local part = json.decode(mess)\n  if part == nil then\n    system.print(\"Invalid message: \" .. mess)\n    return nil\n  end\n  table.insert(messageParts, {index = part[\"i\"], content = part[\"content\"]})\n  if part[\"i\"] == part['msgPartsCount'] then\n    local fullMessage = getCompleteMessage()\n    messageParts = {} --reset global for next message\n    if myDebug then system.print('Vehicle assemebeled message: \"'..json.encode(fullMessage)..'\"') end\n    return fullMessage\n  else\n    return false\n  end\nend\n\nif message ~= 'DUR-vehicle-received' then --we don't want to try act on our own confirmation\n  if channel == MSG.lastSendChannel and message == 'DUR-system-received' then\n    MSG:unqueueMessage()\n    \n  --elseif channel == MSG.lastReceived.channel and message == MSG.lastReceived.msg then\n  --  MSG:confirmReceive(channel)\n\n  elseif channel == masterId .. \"-splitmsg\" then\n    MSG:confirmReceive(channel)\n    local assembeledMessage = splitMsgAssembly(message)\n    if assembeledMessage then\n      --[[if part[\"action\"] == \"save-track\" then\n        saveBroadcastedTrack(fullMessage)\n      end]]\n      --if part[\"action\"] == \"register-save-track\" then\n        saveBroadcastedTrack(assembeledMessage)\n        --if registered then\n        --  registerConfirm()\n        --end\n      --end\n    else\n      return false\n    end\n\n  elseif channel == raceEventName then\n    MSG:confirmReceive(channel)\n    if message == \"start\" then\n      startCountdown()\n    end\n\n  elseif channel == masterId .. \"-registered\" then\n    MSG:confirmReceive(channel)\n    saveBroadcastedTrack(message)\n  end\n\n  MSG.lastReceived = {channel=channel,msg=message}\nend\n","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"receive(channel,message)","slotKey":"1"},"key":"0"},{"code":"--force start race\nstartCountdown()","filter":{"args":[{"value":"DUR"},{"value":"ready"}],"signature":"onReceived(channel,message)","slotKey":"1"},"key":"1"},{"code":"--DU RACING v1.0 created by rexsilex, NinjaFox and cAIRLs\n\nutils = require('cpml/utils')\n\n-- Params\nraceEventName = \"IcedaleRally\" --export: This should be set to match the raceEventName used on the central system (keep the \"\")\n\norgMode = false --export: If checked you can create new tracks and broadcast them to a central system\n\ntestRace = true --export: If checked this will allow you to test a track that is saved\ntestTrackName = \"IcedaleRally\" --export: Active track name, only used for test races (keep the \"\")\nmaxLaps = 3 --export: Number of laps for this event, set 0 if you want to use the default number of laps\n\nteamName = \"WW\" --export: The name of the team racing for\nteamColorRed = 255 --export: Change the vehicle light color - red 0-255\nteamColorGreen = 255 --export: Change the vehicle light color - green 0-255\nteamColorBlue = 111 --export: Change the vehicle light color - blue 0-255\n\n-- Globals\nmyDebug = false --true for getting debug Printouts\nwaypoints = {}\nradius = 20 -- default radius used when none set on track\nsectionTimes = {} -- stores the times for each section\nsavedWaypoints = {} -- stores the waypoints when an organiser is plotting a race\ncurrentWaypointIndex = 0 -- keeps track of the current active waypoint index\ncurrentWaypoint = nil -- vec3 of the current waypoint poisition, used for working out distance\nstartTime = 0 -- start time in ms\nendTime = 0 -- end time ms\nsplitTime = 0 -- current splt time start\nlapTime = 0 -- tracks lap time\nlapTimes = {} -- tracks all lap times\nremainingLaps = 1 -- updated when the waypoints for the track are loaded\ntotalLaps = 1\ntrackName = ''\nraceStarted = false\nmessageParts = {} -- multipart messaging table\ngTab = 'race' --race tracks new test config\ngState = 'start' -- start, awaiting, ready, set, live, finished, error, organizer, test\ngData = { mainMessage = 'Loading...', toast = 'Welcome to DU Racing' }\nconsumerStarted = false\nbestTime = nil\nupdateWaypointDesired = false --Triggers updating waypoint in system update as waypoints cant be set from flush\nmasterId = unit.getMasterPlayerId()\nupdateOverlayDesired = false\nconsumerStartDesired = false\nraceStartCooldownIndicator = false\n\nduRacingLogo =\n  '<svg style=\"width: 100%; height: 100%;\" width=\"815.000000pt\" height=\"493.000000pt\" viewBox=\"0 0 815.000000 493.000000\" preserveAspectRatio=\"xMidYMid meet\"> <g transform=\"translate(0.000000,493.000000) scale(0.100000,-0.100000)\" fill=\"rgba(255,255,255,1)\" stroke=\"none\"> <path d=\"M3190 4824 c0 -11 104 -156 114 -160 16 -5 298 -25 302 -21 3 2 -59 100 -90 144 -1 1 -60 9 -131 18 -72 8 -145 17 -162 19 -18 3 -33 2 -33 0z\"/> <path d=\"M3890 4724 c0 -9 81 -124 88 -124 4 -1 63 -9 132 -20 69 -10 126 -17 128 -15 3 3 -66 115 -71 115 -1 0 -58 11 -127 25 -132 26 -150 28 -150 19z\"/> <path d=\"M4516 4692 c41 -71 45 -73 169 -98 65 -13 119 -23 121 -21 1 1 -12 22 -30 47 -32 44 -34 45 -147 73 -63 15 -118 27 -122 27 -5 0 -1 -13 9 -28z\"/> <path d=\"M1880 4619 c-186 -13 -320 -26 -326 -31 -3 -3 36 -63 85 -134 50 -71 87 -131 83 -135 -4 -3 -34 -11 -67 -18 -33 -7 -138 -31 -234 -53 -109 -25 -177 -36 -183 -30 -5 5 -55 74 -112 153 l-102 144 -44 -3 c-56 -4 -543 -101 -552 -110 -3 -4 52 -88 123 -186 71 -99 126 -183 122 -186 -4 -4 -60 -27 -123 -50 -137 -51 -481 -197 -493 -209 -6 -6 301 -442 359 -510 2 -2 76 44 166 102 192 123 394 240 407 235 5 -1 71 -88 147 -193 75 -104 152 -210 170 -235 l33 -46 -107 -92 c-59 -50 -168 -153 -244 -229 l-136 -138 255 -348 255 -347 65 112 c63 111 250 396 295 451 l23 28 221 -308 c122 -169 227 -317 234 -329 11 -17 5 -39 -43 -165 -60 -154 -143 -417 -172 -539 l-18 -75 348 -475 c191 -261 355 -483 365 -493 16 -17 17 -9 23 160 7 208 30 485 56 666 l17 128 -278 386 c-153 213 -278 390 -278 396 0 29 247 508 269 521 4 3 104 -132 222 -299 118 -167 217 -304 221 -305 4 0 11 12 14 28 13 49 91 254 138 363 l47 106 -175 251 c-97 138 -176 255 -176 260 0 5 61 71 135 146 83 84 133 142 128 149 -3 7 -60 90 -126 185 -112 163 -118 174 -101 187 11 8 79 42 151 77 73 35 133 66 133 70 0 4 -40 67 -90 139 -49 72 -90 134 -90 138 0 4 42 17 93 29 162 36 219 45 225 36 59 -83 152 -225 152 -231 0 -4 -61 -30 -136 -58 -74 -27 -137 -52 -140 -56 -2 -4 41 -73 96 -154 56 -80 103 -151 105 -158 2 -7 -51 -52 -117 -102 -67 -49 -126 -97 -131 -106 -8 -12 21 -61 133 -222 79 -114 146 -207 149 -207 3 1 24 26 46 57 22 31 71 91 108 134 l68 79 -121 178 -121 177 25 20 c14 11 72 47 130 79 l104 59 -91 134 c-74 107 -89 136 -77 143 8 5 69 23 136 41 l123 32 -71 106 c-39 58 -72 107 -73 109 -1 1 -64 -7 -139 -18 -75 -11 -143 -20 -151 -20 -8 0 -48 50 -90 110 l-77 111 -61 -7 c-123 -13 -269 -32 -273 -37 -3 -2 34 -60 80 -128 47 -68 82 -125 78 -126 -4 -1 -74 -23 -157 -49 -82 -26 -157 -48 -166 -51 -19 -5 -216 274 -203 287 9 8 275 60 309 60 52 1 48 15 -30 129 -42 61 -75 112 -73 112 2 1 83 4 180 8 l178 6 -60 90 c-57 85 -62 90 -102 97 -54 8 -338 10 -338 2 0 -3 29 -48 65 -99 36 -52 65 -96 65 -98 0 -2 -39 -7 -87 -11 -111 -8 -297 -28 -301 -32 -3 -2 136 -207 170 -250 6 -8 -19 -18 -84 -34 -51 -13 -143 -38 -205 -55 l-112 -32 -106 151 -106 151 28 7 c41 10 356 58 382 58 17 0 22 4 17 16 -6 17 -156 235 -159 233 -1 -1 -58 -6 -127 -10z m-516 -584 c64 -91 119 -171 122 -178 3 -8 -17 -22 -53 -37 -32 -13 -145 -65 -250 -116 l-193 -92 -128 176 c-70 97 -138 192 -151 209 l-22 33 28 11 c15 6 122 40 238 75 116 36 221 69 235 74 14 5 32 9 41 9 9 1 63 -66 133 -164z m708 -198 l117 -166 -97 -52 c-53 -28 -143 -79 -200 -112 -88 -51 -106 -58 -117 -46 -7 8 -72 97 -144 199 l-131 185 42 19 c73 33 392 145 403 142 6 -1 63 -77 127 -169z m607 -177 c61 -88 111 -162 111 -164 0 -2 -21 -16 -47 -32 -27 -15 -100 -62 -164 -105 l-116 -77 -132 188 c-72 103 -131 190 -131 194 0 3 10 11 23 17 39 21 321 139 334 139 6 0 61 -72 122 -160z m-736 -442 c87 -123 158 -227 158 -231 0 -5 -52 -65 -115 -135 -63 -70 -143 -162 -177 -205 -59 -75 -63 -77 -79 -60 -30 32 -380 523 -380 533 0 18 404 318 430 320 4 0 77 -100 163 -222z m677 -164 c102 -145 148 -219 142 -227 -5 -7 -34 -43 -64 -82 -31 -38 -90 -121 -132 -182 l-76 -113 -185 261 c-102 143 -185 264 -185 269 0 17 320 290 340 290 5 0 77 -97 160 -216z\"/> <path d=\"M5127 4599 c28 -47 41 -55 138 -78 50 -12 98 -24 108 -27 16 -5 14 0 -8 34 -16 24 -37 42 -53 46 -15 3 -66 17 -115 30 l-87 25 17 -30z\"/> <path d=\"M4180 4546 c0 -14 71 -117 83 -121 19 -7 231 -33 236 -29 2 2 -12 28 -31 57 l-36 54 -103 17 c-57 10 -114 20 -126 23 -13 3 -23 2 -23 -1z\"/> <path d=\"M3010 4504 c0 -11 124 -186 135 -190 7 -3 80 -1 163 3 l152 8 -62 93 -61 92 -163 0 c-90 0 -164 -3 -164 -6z\"/> <path d=\"M3706 4463 c9 -16 33 -51 51 -79 l34 -51 136 -6 c76 -4 138 -5 140 -4 1 2 -18 33 -42 70 -28 40 -54 69 -68 72 -29 6 -209 25 -243 25 l-26 0 18 -27z\"/> <path d=\"M4670 4474 c0 -3 12 -23 27 -47 15 -23 28 -43 28 -45 3 -4 219 -41 223 -38 2 3 -8 22 -23 44 -19 28 -36 42 -58 46 -18 4 -69 15 -114 25 -46 10 -83 17 -83 15z\"/> <path d=\"M5079 4293 c24 -45 39 -53 134 -73 55 -12 101 -20 103 -18 2 3 -9 18 -24 35 -22 25 -44 35 -114 52 -107 26 -111 26 -99 4z\"/> <path d=\"M3547 4170 c36 -56 72 -99 78 -96 7 2 59 7 116 11 166 10 158 1 92 100 l-56 85 -149 0 -148 0 67 -100z\"/> <path d=\"M4514 4244 c65 -99 56 -92 121 -99 33 -3 84 -9 114 -12 l54 -6 -23 39 c-40 67 -44 69 -142 83 -51 7 -104 15 -118 18 l-24 6 18 -29z\"/> <path d=\"M5390 4256 c0 -21 37 -57 69 -66 20 -5 66 -18 104 -29 l67 -20 -16 28 c-13 21 -34 32 -102 53 -48 15 -95 30 -104 33 -10 4 -18 4 -18 1z\"/> <path d=\"M6030 4232 c0 -6 6 -14 13 -19 15 -10 157 -52 177 -53 35 -1 -18 29 -89 50 -40 12 -80 24 -87 27 -8 3 -14 0 -14 -5z\"/> <path d=\"M3995 4204 c10 -16 32 -50 49 -75 l30 -46 125 -6 c69 -3 126 -5 128 -3 1 1 -17 32 -42 68 -49 73 -37 69 -225 84 l-84 7 19 -29z\"/> <path d=\"M5733 4177 c9 -14 43 -31 103 -49 106 -33 115 -34 89 -9 -11 10 -62 32 -113 49 -91 30 -93 31 -79 9z\"/> <path d=\"M4990 4175 c0 -11 50 -85 58 -85 7 0 113 -16 170 -26 l33 -5 -27 40 c-15 23 -28 41 -29 41 -2 0 -47 9 -100 20 -109 22 -105 22 -105 15z\"/> <path d=\"M6460 4128 c8 -8 50 -27 93 -42 43 -15 85 -30 94 -33 10 -4 14 -2 10 4 -6 10 -124 59 -187 78 -22 6 -23 5 -10 -7z\"/> <path d=\"M5519 4083 c5 -11 16 -24 23 -30 16 -12 181 -54 187 -47 13 13 -42 45 -109 64 -41 12 -83 24 -93 27 -16 4 -17 2 -8 -14z\"/> <path d=\"M5975 4028 c11 -17 38 -28 105 -44 88 -20 105 -19 76 6 -11 9 -176 60 -194 60 -2 0 4 -10 13 -22z\"/> <path d=\"M4935 4009 c5 -8 21 -33 36 -55 l28 -42 98 -4 c54 -3 100 -4 101 -2 2 1 -10 23 -27 47 -33 48 -31 47 -180 63 -53 6 -63 5 -56 -7z\"/> <path d=\"M4540 4003 c0 -2 21 -35 46 -73 l47 -70 115 0 114 0 -18 28 c-68 106 -63 100 -117 106 -69 7 -187 13 -187 9z\"/> <path d=\"M5236 3951 c11 -18 24 -36 29 -41 11 -9 184 -34 191 -28 1 2 -6 18 -17 35 -17 27 -28 33 -87 42 -37 7 -82 14 -101 18 l-34 6 19 -32z\"/> <path d=\"M3910 3878 c-58 -11 -107 -22 -109 -24 -2 -2 131 -203 155 -233 3 -3 220 66 236 76 4 2 -23 49 -60 103 -77 114 -63 109 -222 78z\"/> <path d=\"M6257 3874 c3 -8 24 -19 47 -25 22 -6 63 -17 90 -25 27 -8 51 -12 54 -10 7 7 -30 23 -115 49 -61 19 -80 21 -76 11z\"/> <path d=\"M5220 3861 c0 -2 12 -23 28 -47 l27 -44 93 0 c50 0 92 2 92 5 0 19 -48 75 -65 76 -11 0 -55 4 -97 7 -43 4 -78 6 -78 3z\"/> <path d=\"M5730 3862 c0 -26 42 -50 102 -56 34 -4 74 -10 87 -13 23 -6 23 -5 7 19 -14 21 -32 28 -99 42 -95 19 -97 19 -97 8z\"/> <path d=\"M4154 3845 c4 -11 96 -154 112 -173 5 -6 229 21 237 28 5 5 -14 42 -42 84 l-52 76 -130 0 c-112 0 -130 -2 -125 -15z\"/> <path d=\"M5990 3821 c0 -5 6 -13 13 -18 15 -12 169 -45 176 -38 11 11 -18 24 -96 44 -93 24 -93 24 -93 12z\"/> <path d=\"M4840 3804 c0 -4 57 -92 84 -130 3 -4 188 15 192 19 8 8 -55 101 -74 109 -20 8 -202 10 -202 2z\"/> <path d=\"M5621 3758 c21 -33 28 -36 113 -51 50 -9 92 -14 94 -12 2 2 -4 14 -12 27 -13 19 -33 28 -94 41 -42 10 -88 20 -101 24 l-23 6 23 -35z\"/> <path d=\"M6750 3777 c16 -16 168 -62 177 -53 3 2 -35 17 -83 32 -49 14 -93 29 -99 32 -5 2 -3 -2 5 -11z\"/> <path d=\"M6020 3703 c1 -27 30 -41 105 -50 44 -6 82 -9 84 -7 13 11 -29 34 -77 44 -31 6 -69 13 -84 16 -16 3 -28 2 -28 -3z\"/> <path d=\"M6240 3656 c8 -7 42 -19 75 -25 33 -6 71 -14 85 -18 19 -4 22 -3 14 6 -11 12 -144 50 -174 51 -12 0 -12 -2 0 -14z\"/> <path d=\"M4587 3641 l-57 -6 51 -80 c28 -44 54 -84 59 -88 9 -10 220 24 220 35 0 5 -21 40 -46 78 l-47 70 -61 -2 c-34 -1 -87 -4 -119 -7z\"/> <path d=\"M5770 3636 c0 -4 7 -18 16 -31 15 -23 22 -25 95 -25 44 0 79 4 79 8 0 28 -30 41 -107 47 -46 4 -83 4 -83 1z\"/> <path d=\"M6040 3622 c0 -20 27 -30 105 -37 71 -7 78 -6 67 7 -7 9 -35 19 -64 22 -28 4 -64 10 -79 13 -17 3 -29 1 -29 -5z\"/> <path d=\"M5419 3576 l31 -44 82 5 c46 3 84 6 85 7 1 1 -9 19 -23 39 l-25 37 -90 0 -90 0 30 -44z\"/> <path d=\"M5170 3574 c0 -17 84 -125 94 -121 7 3 44 8 82 12 38 4 72 9 76 12 4 2 -7 26 -25 53 l-32 50 -97 0 c-54 0 -98 -2 -98 -6z\"/> <path d=\"M6846 3515 c3 -6 33 -17 67 -23 34 -7 73 -15 87 -18 60 -13 -10 16 -82 34 -54 14 -75 16 -72 7z\"/> <path d=\"M3855 3461 c-60 -27 -111 -54 -113 -59 -2 -7 146 -236 194 -300 1 -2 42 25 91 60 49 34 99 70 111 78 l22 15 -85 128 c-47 70 -91 127 -98 127 -6 0 -61 -22 -122 -49z\"/> <path d=\"M5896 3429 c20 -34 21 -34 105 -39 46 -3 85 -5 87 -4 8 5 -20 44 -36 53 -9 5 -53 12 -96 16 l-79 8 19 -34z\"/> <path d=\"M4560 3374 c-30 -9 -72 -20 -92 -25 l-38 -10 76 -113 75 -113 102 43 c56 24 101 48 99 54 -1 6 -28 49 -59 95 -63 95 -63 95 -163 69z\"/> <path d=\"M5245 3348 c-38 -5 -72 -11 -73 -13 -3 -2 80 -133 103 -163 4 -4 179 40 187 47 4 4 -13 37 -37 74 -51 75 -45 73 -180 55z\"/> <path d=\"M6103 2155 c-136 -42 -218 -137 -250 -289 -35 -169 21 -292 153 -332 93 -28 261 -11 339 35 26 15 32 27 47 92 26 118 31 109 -71 109 l-89 0 -21 -62 c-12 -34 -31 -72 -43 -85 -27 -29 -73 -31 -88 -4 -15 29 -12 137 6 231 30 159 79 250 134 250 35 0 40 -13 40 -106 l0 -75 88 3 87 3 18 90 c21 106 22 103 -81 135 -75 23 -204 26 -269 5z\"/> <path d=\"M7635 2156 c-106 -34 -178 -95 -222 -192 -83 -182 -27 -394 115 -434 81 -22 154 -8 208 42 22 19 22 19 32 -11 11 -30 13 -31 70 -31 l59 0 27 133 c14 72 26 138 26 145 0 9 -32 12 -124 12 -69 0 -127 -3 -129 -7 -2 -5 -7 -20 -11 -35 -6 -27 -5 -28 34 -28 46 0 49 -9 25 -68 -24 -55 -53 -82 -91 -82 -49 0 -58 25 -51 134 4 50 16 128 27 174 33 136 73 196 127 190 l28 -3 3 -88 3 -88 82 3 81 3 19 94 c21 108 25 101 -72 131 -73 23 -203 26 -266 6z\"/> <path d=\"M3376 2143 c-9 -32 -126 -589 -126 -602 0 -10 44 -12 198 -9 182 3 201 5 250 27 75 34 144 113 173 198 31 92 32 228 2 294 -41 91 -93 109 -319 109 -156 0 -173 -2 -178 -17z m304 -77 c12 -32 -5 -181 -31 -284 -21 -82 -59 -156 -89 -172 -22 -12 -80 -14 -80 -2 0 4 20 102 45 217 25 116 48 222 51 238 5 25 10 27 50 27 38 0 46 -4 54 -24z\"/> <path d=\"M4005 2148 c-18 -54 -87 -416 -88 -465 -2 -73 17 -107 79 -138 32 -16 59 -20 149 -20 100 0 115 2 168 28 63 31 99 71 121 135 12 32 106 450 106 468 0 2 -20 4 -44 4 -34 0 -46 -4 -50 -17 -2 -10 -24 -110 -47 -223 -55 -268 -77 -309 -170 -310 -52 0 -89 32 -89 76 0 20 20 129 45 243 25 114 45 213 45 219 0 17 -219 17 -225 0z\"/> <path d=\"M4721 1863 c-34 -164 -65 -306 -67 -315 -5 -16 5 -18 104 -18 l109 0 22 103 c11 56 24 117 27 135 4 17 10 32 14 32 4 0 27 -61 50 -135 l44 -136 144 3 143 3 33 75 33 75 90 3 c102 3 103 3 103 -85 0 -74 -1 -73 126 -73 102 0 114 2 113 18 0 9 -14 150 -32 312 l-32 295 -121 3 -120 3 -135 -291 c-74 -159 -136 -290 -139 -290 -3 0 -26 55 -51 123 l-46 122 34 17 c19 10 42 23 51 30 27 23 52 91 52 145 0 44 -5 58 -30 86 -42 49 -83 57 -282 57 l-174 0 -63 -297z m347 215 c15 -15 15 -70 1 -122 -15 -54 -50 -86 -94 -86 -19 0 -35 2 -35 4 0 6 41 189 45 204 5 15 67 16 83 0z m477 -199 l10 -119 -72 0 -71 0 56 125 c31 68 58 122 62 119 3 -3 10 -59 15 -125z\"/> <path d=\"M6555 2148 c-2 -7 -33 -148 -68 -313 l-63 -300 104 -3 c58 -1 106 -1 109 1 4 5 133 601 133 617 0 16 -209 13 -215 -2z\"/> <path d=\"M6855 2148 c-2 -7 -30 -132 -60 -278 -31 -146 -60 -282 -65 -303 l-8 -38 46 3 47 3 45 212 c25 116 47 214 50 216 3 3 25 -76 48 -176 24 -100 48 -199 53 -219 l10 -38 118 0 118 0 62 293 c35 160 65 302 68 315 5 20 2 22 -40 22 -35 0 -47 -4 -51 -17 -2 -10 -24 -109 -47 -221 -24 -111 -46 -199 -50 -195 -5 7 -99 410 -99 428 0 3 -54 5 -120 5 -88 0 -122 -3 -125 -12z\"/> </g> </svg>'\n\n-- Functions\nfunction handleTextCommandInput(text)\n  local commands = {\n    help = function()\n      system.print('-==:: DU Racing Command Help ::==-')\n      system.print('\"start\" or {ALT+1} - When in test mode starts the test race with the set track.')\n      system.print('\"addWaypoint\" or {ALT+2} - When in organizer mode, adds the current core position to the track waypoints.')\n      system.print('\"saveTrack(track name, lap count, waypoint radius)\" - When in organizer mode, saves the created waypoints with the given track name, lap count and waypoint radius to the local databank.')\n      system.print('\"broadcastTrack(track name)\" - When in organizer mode, broadcasts the prior saved track to a central system.')\n      system.print('\"listTracks\" - Lists all track keys saved in the local, connected databank.')\n    end,\n    addWaypoint = function()\n      if orgMode then\n        saveWaypoint()\n      elseif testRace then\n        continueRace()\n      else\n        errorPrint('Waypoints can only be saved in organizer mode.')\n      end\n    end,\n    start = function()\n      if testRace then\n        startCountdown()\n      else\n        errorPrint('You can only start a race from a vehicle if you are in test mode.')\n      end\n    end,\n    listTracks = function()\n      local keys = db.getKeys()\n      if keys ~= '[]' then\n        keys = json.decode(keys)\n        local out = ''\n        for key, value in pairs(keys) do\n        if value ~= 'activeRace' then\n          out = value .. ', ' .. out\n        end\n        end\n        system.print(out)\n      else\n        system.print('No tracks saved on this Databank.')\n      end\n    end,\n    saveTrack = function(trackNameLapCountWaypointRadius)\n      local trackName, lapCount, waypointRadius\n      local paramSeperation = string.find(trackNameLapCountWaypointRadius,',')\n      if paramSeperation then\n        trackName = string.sub(trackNameLapCountWaypointRadius,1,paramSeperation - 1)\n        local LapCountWaypointRadius = string.sub(trackNameLapCountWaypointRadius,paramSeperation + 1,#trackNameLapCountWaypointRadius)\n        paramSeperation = string.find(LapCountWaypointRadius,',')\n        if paramSeperation then\n          lapCount = tonumber(string.sub(LapCountWaypointRadius,1,paramSeperation - 1))\n          lapCount = type(lapCount) == 'number' and math.ceil(lapCount) or false\n          waypointRadius = tonumber(string.sub(LapCountWaypointRadius,paramSeperation + 1,#LapCountWaypointRadius))\n          waypointRadius = type(waypointRadius) == 'number' and waypointRadius or false\n        end\n      end\n      \n      local err = ''\n      if not savedWaypoints[1] then err = 'No waypoints created that could be saved for a track. ' end\n      if not trackName or trackName=='' then err = err..'A track can not be saved without a name. ' end\n      if not lapCount or not (lapCount > 0) then err = err..'Lap Count must be an integer greater zero. ' end\n      if not waypointRadius or not (waypointRadius > 0) then err = err..'Waypoint radius must be a number greater zero.' end\n      if err ~= '' then\n        errorPrint(err)\n      else\n        -- Exports current saved waypoints to JSON\n        local track = {name = trackName, radius = waypointRadius, laps = lapCount, waypoints = savedWaypoints}\n        db.setStringValue(trackName, json.encode(track))\n        system.print([[The track has been saved to the local databank. \n        Change to test mode to try it out. \n        Type \"broadcastTrack(trackName)\" to save the track to a closeby, active central system.]])\n      end\n    end,\n    exportTrack = function(trackName)\n      if trackName ~= '' then\n        local track = db.getStringValue(trackName)\n        local err = ''\n        if not track then err = 'No track found with this track name. ' end\n        if not screen then err = err..'No screen connected for exporting.' end\n        if err ~= '' then\n          errorPrint(err)\n        else\n          screen.setHTML(track)\n          system.print('Track has been exported to the screen HTML.')\n        end\n      else\n        errorPrint('The track name must be given to export a track.')\n      end\n    end,\n    broadcastTrack = function(trackName)\n      if trackName ~= '' then\n        local track = db.getStringValue(trackName)\n        if not track then\n          errorPrint('No track with this name is saved on the databank. If you just recorded the track, save it using \"saveTrack(track name, lap count, waypoint radius)\" first.')\n        else\n          MSG:send('fdu-centralsplit', track) --saves track\n          system.print('Track \"'..trackName..'\" has been broadcasted to the central system.')\n        end\n      else\n        errorPrint('A track name must be used to broadcast a track.')\n      end\n    end\n  }\n\n  if myDebug then myPrint('Entered Command: \"'..text..'\"', false) end\n  \n  local paramStart = string.find(text,'%(')\n  local cmd = paramStart and string.sub(text,1,paramStart-1) or text\n  local paramsString = ''\n  \n  if paramStart then\n    local paramEnd = string.find(text,'%)')\n    paramEnd = paramEnd or #text+1--we assume someone just forgot the closing ) and try to process anyway\n    paramsString = string.sub(text,paramStart+1,paramEnd-1)\n  end\n  if commands[cmd] then\n    commands[cmd](paramsString)\n  else\n    errorPrint('Following command could not be executed: \"'..text..'\"')\n  end\nend\n\n\n\n\n-- Message part system functions\nfunction getKeysSortedByValue(tbl, sortFunction)\n  local keys = {}\n  for key in pairs(tbl) do\n    table.insert(keys, key)\n  end\n\n  table.sort(\n    keys,\n    function(a, b)\n      return sortFunction(tbl[a], tbl[b])\n    end\n  )\n\n  return keys\nend\n\n\n\n\n\n-- calcDistance(worldPos v1, worldPos v2)\n-- Returns the distance in metres between 2 vectors\nfunction calcDistance(v1, v2)\n  return (vec3(v2) - vec3(v1)):len()\nend\n\n\n\n\n\n-- xyzPosition(float x, float y, float z)\n-- Returns a waypoint string from the given coordinates\nfunction xyzPosition(x, y, z)\n  -- using 0 for body works with world coordinates\n  return '::pos{0,0,'..x..','..y..','..z..'}'\nend\n\n\n\n\n\n-- checkWaypoint()\n-- if user is in range of waypoint, triggers nextWaypoint\nfunction checkWaypoint() -- This is checked on flush to not miss a point when moving fast, might use a vec3 inbetween positions later to make it even more accurate\n  if raceStarted then\n    local distance = calcDistance(core.getConstructWorldPos(), waypoints[currentWaypointIndex])\n\n    while distance <= radius do -- Are we within the radius of our next waypoint?\n      local sysTime = system.getTime()\n      table.insert(sectionTimes, utils.round(sysTime - splitTime,.001))\n      splitTime = sysTime -- reset split time\n      nextWaypoint()\n      if raceStarted then updateWaypointDesired = true end --cause race might have ended at just that waypoint\n      distance = calcDistance(core.getConstructWorldPos(), waypoints[currentWaypointIndex])\n    end\n    --[[if currentWaypoint and distance <= radius then -- Are we within the radius of our target destination?\n      local sysTime = system.getTime()\n      table.insert(sectionTimes, utils.round(sysTime - splitTime,.001))\n      splitTime = sysTime -- reset split time\n      nextWaypoint()\n    end]]\n  end\nend\n\n\n\n\n\n-- nextWaypoint\n-- returns null increments the active index in use of waypoint, sets the vec3 waypoint for user\nfunction nextWaypoint()\n  local now = system.getTime()\n  -- Queries the databank and set the next waypoint\n  if raceStartCooldownIndicator == false then\n    gState = 'midrace'\n    myPrint('Waypoint complete.', true)\n  end --Preventing instant \"Waypoint complete\" Message to override start sequence\n  currentWaypointIndex = currentWaypointIndex + 1\n  nextPoint = waypoints[currentWaypointIndex]\n  \n  if not nextPoint then -- no more waypoints?\n    table.insert(lapTimes, utils.round(now - lapTime,.001))\n   \n        \n    if(prevEnd==nil) then\n      prevEnd = startTime\n    end\n    local thisLapTime = now - prevEnd \n    prevEnd=now\n    updateBestTime(thisLapTime)\n    -- check laps\n    remainingLaps = remainingLaps - 1\n    myPrint('Lap complete.', true)\n    \n    if remainingLaps == 0 then\n      endTime = now\n      --updateTime()\n      endRace()\n    else\n\n    -- reset lap start\n    lapTime = now\n    -- reset the waypoints for next lap\n    currentWaypointIndex = 1\n    nextPoint = waypoints[1]\n    end\n  end\n  if raceStarted then currentWaypoint = vec3(nextPoint[1], nextPoint[2], nextPoint[3]) end\n  updateOverlayDesired = true\nend\n\n\n\n\n\nfunction modulus(a, b)\n  return a - math.floor(a / b) * b\nend\n\n\n\n\n\nfunction updateWaypointMarker()\n  system.setWaypoint('::pos{0,0,'..currentWaypoint.x..','..currentWaypoint.y..','..currentWaypoint.z..'}')\n  system.print(\"waypoint updated\")\n  db.setIntValue(\"currWP\", currentWaypointIndex)\n  db.setIntValue(\"remainingLaps\", remainingLaps)\nend\n\n\n\n\n\n-- Start Race\nfunction startRace()\n  unit.stopTimer('countGo')\n  if not raceStarted or testRace then\n    gData.mainMessage = ''\n    gState = 'green'\n    myPrint('! GO !', true)\n    raceStarted = true\n    raceStartCooldownIndicator = true\n    if maxLaps > 0 then\n      remainingLaps = maxLaps\n    else\n      remainingLaps = track['laps']\n    end   \n    unit.setTimer('raceStartCooldown',2)\n    --[[ set first waypoint moved to start of countdown\n    currentWaypointIndex = 1\n    currentWaypoint = vec3(waypoints[1][1], waypoints[1][2], waypoints[1][3])\n    system.setWaypoint(xyzPosition(currentWaypoint.x, currentWaypoint.y, currentWaypoint.z))]]\n\n    -- set start time and first split time\n    startTime = system.getTime()\n    db.setStringValue(\"startTime\", json.encode(startTime))\n    db.setIntValue(\"remainingLaps\", remainingLaps)\n\n    prevEnd = nil\n    lapTime, splitTime = startTime, startTime\n  end\nend\n\n\n\n-- continue Race\nfunction continueRace()\n  if not raceStarted or testRace then\n    gData.mainMessage = ''\n    myPrint('! Continue !', true)\n    raceStarted = true\n    gState = 'midrace'\n\n    currentWaypointIndex = db.getIntValue(\"currWP\")\n    currentWaypoint = vec3(waypoints[currentWaypointIndex][1], waypoints[currentWaypointIndex][2], waypoints[currentWaypointIndex][3])\n    system.setWaypoint(xyzPosition(currentWaypoint.x, currentWaypoint.y, currentWaypoint.z))\n\n    -- set start time and first split time\n    startTime = db.getStringValue(\"startTime\", json.decode(startTime))\n    remainingLaps = db.getIntValue(\"remainingLaps\")\n    prevEnd = nil\n    lapTime, splitTime = startTime, startTime\n  end\nend\n\n\n\n--TODO Counts down from 5 to go. Needs to be able to communicate with tower\n-- Suggest refactor on this to use 1 function that decrements a value\nfunction startCountdown()\n\tif not raceStarted or testRace then\n    unit.setTimer('count5', 1)\n    unit.setTimer('count4', 2)\n\t\tunit.setTimer('count3', 3)\n\t\tunit.setTimer('count2', 4)\n\t\tunit.setTimer('count1', 5)\n\t\tunit.setTimer('countSet', 6)\n\t\tunit.setTimer('countGo', 7)\n\t\tgData.mainMessage = ''\n\t\tgState = 'red5'\n\tend\nend\nfunction countdownReady5()\n  unit.stopTimer('count5')\n  gState = 'red5'\n  myPrint('Ready', true)\nend\nfunction countdownReady4()\n  unit.stopTimer('count4')\n  gState = 'red4'\n  myPrint('5', true)\nend\nfunction countdownReady3()\n  unit.stopTimer('count3')\n  gState = 'red3'\n  myPrint('4', true)\nend\nfunction countdownReady2()\n  unit.stopTimer('count2')\n  gState = 'red2'\n  myPrint('3', true)\nend\nfunction countdownReady1()\n  unit.stopTimer('count1')\n  gState = 'red1'\n  myPrint('2', true)\nend\nfunction countdownSet() \n  gState = 'red'\n  unit.stopTimer('countSet')\n  myPrint('1', true)\nend\n\nfunction updateBestTime(time)\n  debugPrint('bestTime'..formatTime(bestTime))\n  debugPrint('newTime'..formatTime(time))\n  if bestTime == nil or bestTime ==0 or time < bestTime then --store personal track record\n    debugPrint('Best time logic')\n    db.setStringValue(trackName..'-bestTime-'..masterId, json.encode(time))\n    debugPrint('ref'..tostring(deltaTimeRef))\n    bestTime = time   \n    myPrint('New personal track record! '..formatTime(time), true)\n  end\nend\n-- End Race\nfunction endRace()\n  --system.setWaypoint(nil)\n  --TODO where do we set final waypoint? Might be a box stop area / parking area?\n\n  gData.mainMessage = 'Final time ' .. formatTime(endTime - startTime)\n\n  local finishTime = endTime-startTime\n  myPrint('Finished race', true)\n  myPrint('Section times: ' .. json.encode(sectionTimes), false)\n  myPrint('Lap times: ' .. json.encode(lapTimes), false)\n  myPrint('Final time: ' .. formatTime(finishTime), false)\n  raceStarted = false\n  \n  if testRace == false then\n    sendFinalTimes() -- Emit this data\n  end\nend\n\nMSG = {\n  queue = {},\n  lastSendChannel = '',\n  lastReceived = {channel='',msg=''},\n  \n  queueMessage = function(self, channel, message)\n    table.insert(MSG.queue, {channel = channel, message = message}) --, time = system.getTime()})\n    if myDebug then system.print('Vehicle added to queue: '..json.encode(MSG.queue)) end\n    if consumerStarted == false then\n      consumerStarted = true\n      MSG:consumeQueue() --we can send the first msg instantly.\n      consumerStartDesired = true\n      if myDebug then system.print('Vehicle consumer started.') end\n    end\n  end,\n  \n  consumeQueue = function()\n    -- local sortedMessages = getKeysSortedByValue(\n      -- MSG.queue,\n      -- function(a, b)\n        -- return a['time'] < b['time']\n      -- end)\n    -- for _, key in ipairs(sortedMessages) do\n      --emitter.send(MSG.queue[key]['channel'], MSG.queue[key]['message'])\n      MSG.lastSendChannel = MSG.queue[1]['channel']\n      emitter.send(MSG.queue[1]['channel'], MSG.queue[1]['message'])\n      --unqueueMessage(key)\n    --end    \n  end,\n  \n  -- unqueueMessage = function(key)\n    -- table.remove(MSG.queue, key)\n    -- local count = 0\n    -- for _ in pairs(MSG.queue) do count = count + 1 end\n    -- if count == 0 then \n      -- unit.stopTimer('consumeMsgQueue')\n      -- consumerStarted = false\n    -- end\n  -- end,\n  \n  unqueueMessage = function()\n    local queueCount = GNR:countTableEntries(MSG.queue)\n    if queueCount == 0 then\n      unit.stopTimer('consumeMsgQueue')\n      consumerStarted = false\n      if myDebug then system.print('Vehicle queue stopped. No more entries.') end\n    else\n      if myDebug then system.print('Vehicle unqueued: '..json.encode(MSG.queue[1])) end\n      table.remove(MSG.queue, 1)\n      if myDebug then system.print('Vehicle remaining queue: '..json.encode(MSG.queue)) end\n      if GNR:countTableEntries(MSG.queue) == 0 then\n        unit.stopTimer('consumeMsgQueue')\n        consumerStarted = false\n        if myDebug then system.print('Vehicle queue stopped. No more entries after removal.') end\n      end\n    end\n  end,\n\n\tsend = function(self, channel, data) --data needs to be string\n\n    local function split(str, maxLength)\n      local splitParts = {}\n      local strLength = str:len()\n\n      local splitCount = math.ceil(strLength / maxLength)\n      local remainingSplitsCount = splitCount\n      local startPos = 1\n      local endPos = maxLength\n      while remainingSplitsCount > 0 do\n        table.insert(splitParts, string.sub(str, startPos, endPos))\n        startPos = endPos + 1\n        endPos = endPos + maxLength > strLength and strLength or endPos + maxLength\n        remainingSplitsCount = remainingSplitsCount - 1\n      end\n      return splitParts, splitCount\n    end\n\n    local index = 1\n    local dataParts, dataPartsCount = split(data, 250)\n    for lineId, dataContent in ipairs(dataParts) do\n      local sendContent = json.encode({i = index, msgPartsCount = dataPartsCount, content = dataContent})\n      local sendContent = string.gsub(sendContent, '\\\\\"', '|')\n      sendContent = string.gsub(sendContent, '\"', '\\\\\"')\n      MSG:queueMessage(channel, sendContent)\n      index = index + 1\n    end\n\tend,\n  \n  confirmReceive = function(self,channel)\n    emitter.send(channel,'DUR-vehicle-received')\n  end\n}\n\nGNR = {\n  countTableEntries = function(self,t)\n    local count = 0\n    for _ in pairs(t) do\n      count = count + 1\n    end\n    return count\n  end\n}\n\nfunction getCompleteMessage()\n  local assembeledMessage = ''\n  for key in ipairs(messageParts) do\n    assembeledMessage = assembeledMessage .. messageParts[key]['content']\n  end\n  return assembeledMessage\nend\n\nfunction intFormat0(n)\n  return string.format('%.f', n)\nend\n-- Emitter/Receiver functions\n\n-- Clear DB\nfunction clearDB()\n  db.clear() -- Clears the databank of all entries\nend\n\n-- Set Track Waypoints\nfunction setTrackWaypoints(trackKey, trackJson)\n  -- Sets the JSON as waypoints for the location\n  db.setStringValue(trackKey, trackJson)\nend\n\n-- Emit final times\nfunction sendFinalTimes()\n  -- JSON encode the logged times and emit them to the stadium\n  local times = {\n    finalTime = utils.round(endTime - startTime,.001),\n    lapTimes = lapTimes,\n    raceEventName = raceEventName,\n    racer = masterId\n  }\n  \n  local timeData = json.encode(times)\n  timeData = string.gsub(timeData, '\\\\\"', '|')\n  timeData = string.gsub(timeData, '\"', '\\\\\"')\n  MSG:queueMessage(raceEventName..'-finish',timeData)\nend\n\n-- Race Organiser Functions\n\n-- Save waypoint\nfunction saveWaypoint()\n  -- Saves the current position as a waypoint\n  table.insert(savedWaypoints, core.getConstructWorldPos())\n\n  -- Output to lua console for debug\n\tlocal pos = core.getConstructWorldPos()\n  local curr = xyzPosition(pos[1], pos[2], pos[3])\n  system.print(curr)\nend\n\n-- save broadcasted track\nfunction saveBroadcastedTrack(str)\n  local track = json.decode(str)\n  if track == nil or type(track) ~= 'table' then\n    errorPrint('Received track data is not valid. Restart board to retry.')\n  else\n    db.setStringValue(track['name'], str)\n    loadTrack(track['name'])\n    myPrint('Track: \"'..track['name']..'\" has been loaded.')\n    registerConfirm()\n  end\nend\n\n-- load track\nfunction loadTrack(name)\n  if db.hasKey(name..'-bestTime-'..masterId) then\n        \n    bestTime = json.decode(db.getStringValue(name..'-bestTime-'..masterId))\n    debugPrint('Current best time'..tostring(bestTime))\n  else\n    bestTime = nil --needs to stay in case we start a new race without restarting the pb\n    debugPrint('No best time')\n  end\n  if db.hasKey(name) then\n    local track = db.getStringValue(name)\n    if track ~= nil and track ~= '' then\n      -- Sets the number of laps for this track\n      track = json.decode(track)\n      if maxLaps > 0 then\n        remainingLaps = maxLaps\n      else\n        remainingLaps = track['laps']\n      end\n      totalLaps = remainingLaps\n      waypoints = track['waypoints']\n      if track['radius'] ~= nil then\n        radius = track['radius']\n      end\n\n      \n      if not waypoints then\n        errorPrint('Could not load track. No track waypoints found.')\n        return false\n      end\n      trackName = name\n    end\n    errorPrint('Track could not be loaded. Track data is empty.')\n  else\n    errorPrint('Track could not be loaded. No track with the given name saved.')\n  end\nend\n\nfunction toggleTestMode()\n  testRace = ~testRace\n  if testRace then\n    enterTestMode()\n  else\n    exitTestMode()\n  end\nend\n\n--UI stuff\nfunction updateOverlay()\n  local html = '<div class=\"mainWrapper\">'\n  html = html .. '<div class=\"mainMessage\">' .. gData.mainMessage .. '</div>'\n  if gData.toast ~= '' then\n    html = html .. '<div class=\"toast\">' .. gData.toast .. '</div>'\n  end\n  doLights = false\n  local startLight1,startLight2,startLight3,startLight4,startLight5='','','','',''\n  if gState == 'red5' then\n    doLights = true\n  end\n  if gState == 'red4' then\n    doLights = true\n    startLight1='activeRed'\n  end\n  if gState == 'red3' then\n    doLights = true\n    startLight1='activeRed'\n    startLight2='activeRed'\n  end\n  if gState == 'red2' then\n    startLight1='activeRed'\n    startLight2='activeRed'\n    startLight3='activeRed'\n    doLights = true\n  end\n  if gState == 'red1' then\n    startLight1='activeRed'\n    startLight2='activeRed'\n    startLight3='activeRed'\n    startLight4='activeRed'\n    doLights = true\n  end\n  if gState == 'red' then\n    startLight1='activeRed'\n    startLight2='activeRed'\n    startLight3='activeRed'\n    startLight4='activeRed'\n    startLight5='activeRed'\n    doLights = true\n  end\n  if gState == 'green' then\n    startLight1='activeGreen'\n    startLight2='activeGreen'\n    startLight3='activeGreen'\n    startLight4='activeGreen'\n    startLight5='activeGreen'\n    doLights = true\n  end\n  if doLights then\n    html = html..\n      [[<div id=\"traffic\" class=\"fadeaway\">\n        <svg viewBox=\"0 0 845 200\">\n          <g stroke=\"#000\" stroke-opacity=\"0.65\" fill=\"#333\" fill-opacity=\"0.65\">\n            <path d=\"M 0 0 L 1 200 L 845 200 L 845 1\" fill-opacity=\"0.65\"/>\n            <path fill=\"#444\" d=\"M 20 20 L 20 180 L 825 180 L 825 20\" fill-opacity=\"0.35\"/>\n            <circle cx=\"100\" cy=\"100\" r=\"75\" id=\"rl\" class=\"]]..startLight1..[[\"></circle>\n            <circle cx=\"260\" cy=\"100\" r=\"75\" id=\"r2\" class=\"]]..startLight2..[[\"></circle>\n            <circle cx=\"420\" cy=\"100\" r=\"75\" id=\"r3\" class=\"]]..startLight3..[[\"></circle>\n            <circle cx=\"580\" cy=\"100\" r=\"75\" id=\"yl\" class=\"]]..startLight4..[[\"></circle>\n            <circle cx=\"740\" cy=\"100\" r=\"75\" id=\"gl\" class=\"]]..startLight5..[[\"></circle>\n          </g>\n        </svg>\n      </div>]]\n  end\n\tlocal waypointText, lapsText\n  if gState == 'start' or gState == 'awaiting' then\n\t\twaypointText, lapsText = '---','---'\n  else\n\t\twaypointText = currentWaypointIndex - 1 < 0 and 0 or currentWaypointIndex - 1 > #waypoints and #waypoints or currentWaypointIndex - 1\n    waypointText = waypointText .. '/' .. #waypoints\n    lapsText = totalLaps - remainingLaps + 1\n    lapsText = lapsText > totalLaps and totalLaps or lapsText\n\t\tlapsText = lapsText .. '/' .. totalLaps\n\tend\n  html = html..\n    [[<div class=\"mainArea\">\n      <div class=\"logo\">]]\n        ..duRacingLogo..\n      [[</div>\n      <div class=\"info\">\n        <span class=\"label\">Track Name: </span>\n        <span class=\"value\">]]..trackName..[[</span>\n      </div>\n      <div class=\"info\">\n        <span class=\"label\">Team Name: </span>\n        <span class=\"value\">]]..teamName..[[&nbsp;&nbsp;\n          <span style=\"margin-left: 10px;display: inline-block; width: 10px; height: 10px; background: rgb(]]..teamColorRed..', '..teamColorGreen..', '..teamColorBlue..[[);\"></span>\n        </span>\n      </div>\n      <div class=\"info\">\n        <span class=\"label\">Laps: </span>\n        <span class=\"value\">]]..lapsText..[[</span> \n      </div>\n      <div class=\"info\">\n        <span class=\"label\">Waypoints: </span>\n        <span class=\"value\">]]..waypointText..[[</span> \n      </div>\n    </div>]]\n\n  system.setScreen(styles .. html)\nend\n\nfunction clearOverlay()\n  system.destroyWidgetPanel(raceInfoPanel)\nend\n\nfunction initOverlay()\n  --section: Race Status\n  raceInfoPanel = system.createWidgetPanel('DU Racing Clock')\n  lapTimeRef = addStaticWidget(raceInfoPanel, '0:00:00.000', 'Lap Time', '')\n  totalTimeRef = addStaticWidget(raceInfoPanel, '0:00:00.000', 'Total Time', '')\n  deltaTimeRef = addStaticWidget(raceInfoPanel, '--:--:--.---', 'Best Lap', '')\n\n  --set up styles\n  styles =\n    [[\n\n  <style type=\"text/css\">\n  .mainWrapper, .glowText{\n  \tcolor: #a1ecfb;\n    margin: 0 0 20px;\n    transition: color 250ms ease-out;\n    text-transform: uppercase;\n  }\n  .mainMessage{\n    font-size: 7vh;\n    position: absolute; \n    top: 15vh;\n    left: 0;\n    text-align: center;\n    width: 100vw;\n  }\n  .activeRed{\n    fill: red;\n  }\n  .activeYellow{\n    fill: yellow;\n  }\n  .activeGreen{\n    fill: green;\n  }\n  .toast{\n    -webkit-animation: cssAnimation 0s ease-in 5s forwards;\n    background-color: rgba(2,17,20,0.65);\n    border: 1px solid rgb(2, 157, 187);\n    font-size: 2vh;\n    font-weight: 700;\n    color: #a1ecfb;\n    display: block;\n    padding: 20px;\n    animation-fill-mode: forwards;\n    position: relative; \n    top: 80vh;\n    left: 30vw;\n    text-align: center;\n    width: 40vw;\n  }\n  .fadeaway{\n    -webkit-animation: cssAnimation 0s ease-in 2s forwards;\n    animation-fill-mode: forwards;\n  }\n  .mainArea {\n    position: absolute; \n    left: 2vw; \n    top: 5vh;\n    width: 30vw;\n    height: 17vh;\n    padding: 1vh 1vw;\n  }\n  .mainArea .logo {\n    display: block;\n    width: 17vw; \n    height: 17vh;\n    background-color: rgba(2,17,20,0.65);\n    padding: 2vh 2vw;\n  }\n  .mainArea .info {\n    position: relative;\n    display: block;\n    padding: 1em 5em 1em 1em;\n    overflow: hidden;\n    margin: 10px 0;\n    width: 17vw;\n    border-top: 0;\n    border-left: 1px solid rgb(2, 157, 187);\n  }\n  .mainArea .info:before {\n    content : \"\";\n    position: absolute;\n    left  : 0;\n    bottom  : 0;\n    height  : 1px;\n    width   : 15vw;\n    border-bottom: 1px solid rgb(2, 157, 187);\n  }\n  .mainArea .info:after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(2,17,20,0.65);\n    border: 1px solid rgb(2, 157, 187);\n    transform-origin: 100% 0;\n    transform: skew(-45deg);\n    z-index: -1;\n  }\n  .mainArea .label {\n    display: inline-block;\n    width: 6vw;\n  }\n  .mainArea .value {\n    display: inline-block;\n    color: #ffffff;\n  }\n  .ad, .map{\n    width: 100%;\n  }\n  @-webkit-keyframes cssAnimation {\n    to {width: 0; height: 0; visibility: hidden;}\n  }\n  #traffic{\n    left:24.75vw; top:5vw; width:50vw; height:10vw;\n    position: absolute;\n  }\n  circle{\n    transition: all 0.5s cubic-bezier(.89,.27,.78,.59);\n  }\n  </style>  \n  ]]\n\n  --updateOverlayDesired = true\n  system.showScreen(1)\nend\n\nfunction toast(message)\n  gData.toast = message\n  updateOverlayDesired = true\nend\n\nfunction addProgressWidget(parentPanel, value)\n  local tempWidget = system.createWidget(parentPanel, 'gauge')\n  local tempData = system.createData('{\"percentage\": ' .. value .. '}')\n  system.addDataToWidget(tempData, tempWidget)\n  return tempData\nend\n\nfunction addStaticWidget(parentPanel, value, label, unit)\n  local tempWidget = system.createWidget(parentPanel, 'value')\n  local tempData =\n  system.createData('{\"value\": \"' .. value .. '\",\"label\":\"' .. label .. '\", \"unit\": \"' .. unit .. '\"}')\n  system.addDataToWidget(tempData, tempWidget)\n  return tempData\nend\n\nfunction updateTime()\n  if raceStarted then\n    local now = system.getTime()\n    system.updateData(totalTimeRef, '{\"value\": \"' .. formatTime(now - startTime) .. '\"}')\n    system.updateData(lapTimeRef, '{\"value\": \"' .. formatTime(now - lapTime) .. '\"}')\n    system.updateData(deltaTimeRef, '{\"value\": \"' .. formatTime(bestTime) .. '\"}')\n  end\nend\n\nfunction formatTime(seconds)\n  \n  if(seconds == nil)then\n    return '--:--:--.---'\n  end \n  local function leadingZero(num)\n    num = tonumber(num)\n\t\treturn num < 10 and '0'..num or num\n\tend\n\n  function postZeros(num)\n    if(string.len(num)<5)then \n      return num..'00'\n    end\n    if(string.len(num)<6) then \n      return num..'0'\n    end \n    return num\n  end\n  local secondsRemaining = seconds\n  local hours = math.floor(secondsRemaining / 3600)\n  secondsRemaining = modulus(secondsRemaining, 3600)\n  local minutes = math.floor(secondsRemaining / 60)\n  local seconds = modulus(secondsRemaining, 60)  \n  return leadingZero(hours) .. ':' .. leadingZero(minutes) .. ':' .. postZeros(leadingZero(utils.round(seconds,.001)))\nend\n\n-- Activate screen and UI\ninitOverlay()\nif screen then\n  screen.activate()\nend\n\nfunction setDefaults()\n  -- Lights (if set)\n  if light1 then \n    light1.setRGBColor(teamColorRed, teamColorGreen, teamColorBlue)\n  end\n  if light2 then \n     light2.setRGBColor(teamColorRed, teamColorGreen, teamColorBlue)\n  end\n  if light3 then \n     light3.setRGBColor(teamColorRed, teamColorGreen, teamColorBlue)\n  end\nend\n\nfunction onStart()\n  unit.hide()\n  setDefaults()\n  if orgMode then\n    trackName = 'TBC'\n    newRaceInfoPanel = system.createWidgetPanel('New Race')\n    gState = 'organiser'\n    myPrint('-==:: DU Racing Organiser Mode ::==-', false)\n    myPrint([[To create a new track type \"addWaypoint\" in the lua console or press \"ALT+2\" to save the current location as a new waypoint.\n    The first waypoint should be at the start area, last at the finish line.\n    Type \"saveTrack(track name, lap count, waypoint radius)\" to save the track local and optional \"broadcastTrack(track name)\" afterwards to add it to the central system.]]\n    ,false)\n    gData.mainMessage = ''\n    toast('Entering Organizer Mode')\n  elseif testRace then\n    enterTestMode()\n  else\n    -- emit racer online if we have a race ID\n    if raceEventName ~= \"\" then\n      local startData = {raceEventName = raceEventName, racer = masterId}\n      startData = json.encode(startData)\n      startData = string.gsub(startData, '\\\\\"', '|')\n      startData = string.gsub(startData, '\"', '\\\\\"')\n      MSG:queueMessage(raceEventName ..'-register', startData)\n    end\n    gState = 'awaiting'\n    gData.mainMessage = 'REGISTERING'\n    toast('Registering with mainframe')\n  end\nend\n\nfunction registerConfirm()\n  gState = 'ready'\n  gData.mainMessage = ''\n  toast('Awaiting race start')\nend\n\nfunction enterTestMode()\n  myPrint('-==:: DU Racing Test Mode ::==-')\n  -- Check they have an active track\n  if testTrackName == '' then\n    errorPrint('No test track has been set. Do so in the exported Lua parameters.')\n    return false\n  end\n\n  loadTrack(testTrackName)\n\n  myPrint('Type \"start\" in lua console or hit {ALT+1} to start the test race.')\n  gData.mainMessage = 'Press ALT+1 to begin <p> or Alt+2 to continue'\n  toast('Test mode activated.')\nend\n\nfunction exitTestMode()\n  myPrint('Exiting Test Mode.', true)\nend\nfunction setState(newState, newData, clear)\n  gState = newState\n  if clear then\n    gData = newData\n  else\n    --todo, only overwrite new data\n  end\nend\n\nfunction errorPrint(msg)\n  myPrint('ERROR: ' .. msg, true)\n  gState = 'error'\nend\n\nfunction debugPrint(msg)\n  if(myDebug) then\n    system.print(msg)\n  end\nend\n\n--Helper function to wrap system.print().  If second argument is true, it will also call a toast with the same message.\nfunction myPrint(msg, doToast)\n  return system.print(msg), doToast and toast(msg)\nend\n\nonStart()\n\n\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"2"},{"code":"MSG:consumeQueue()\nif myDebug then system.print('MSG consumer running: '..json.encode(MSG.queue)) end","filter":{"args":[{"value":"consumeMsgQueue"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"3"},{"code":"countdownReady3()","filter":{"args":[{"value":"count3"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"4"},{"code":"countdownReady2()","filter":{"args":[{"value":"count2"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"5"},{"code":"countdownReady1()","filter":{"args":[{"value":"count1"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"6"},{"code":"countdownSet()","filter":{"args":[{"value":"countSet"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"7"},{"code":"startRace()","filter":{"args":[{"value":"countGo"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"8"},{"code":"countdownReady4()","filter":{"args":[{"value":"count4"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"9"},{"code":"countdownReady5()\ncurrentWaypointIndex = 1\n    currentWaypoint = vec3(waypoints[1][1], waypoints[1][2], waypoints[1][3])\n    updateWaypointMarker()","filter":{"args":[{"value":"count5"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"10"},{"code":"raceStartCooldownIndicator = false\ngState = 'midrace'\nunit.stopTimer('raceStartCooldown')","filter":{"args":[{"value":"raceStartCooldown"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"11"},{"code":"handleTextCommandInput(text)","filter":{"args":[{"variable":"*"}],"signature":"inputText(text)","slotKey":"-4"},"key":"12"},{"code":"if updateOverlayDesired then\n\tupdateOverlay()\n    updateOverlayDesired = false\nend\nif updateWaypointDesired then\n    updateWaypointDesired = false\n    updateWaypointMarker()\n    \n    if myDebug then system.print('Next waypoint: '..xyzPosition(currentWaypoint.x, currentWaypoint.y, currentWaypoint.z)) end\nend\nif consumerStartDesired then\n  unit.setTimer('consumeMsgQueue', 1)\n  consumerStartDesired = false\nend\n\nif(raceStarted) then\n    updateTime()\nend","filter":{"args":[],"signature":"update()","slotKey":"-4"},"key":"13"},{"code":"handleTextCommandInput(\"start\")","filter":{"args":[{"value":"option1"}],"signature":"actionStart(action)","slotKey":"-4"},"key":"14"},{"code":"handleTextCommandInput(\"addWaypoint\")","filter":{"args":[{"value":"option2"}],"signature":"actionStart(action)","slotKey":"-4"},"key":"15"},{"code":"checkWaypoint()\nupdateTime()","filter":{"args":[],"signature":"flush()","slotKey":"-4"},"key":"16"}],"methods":[],"events":[]}